// Generated by kalamine on 2024-04-27
//
// This is a standalone XKB keymap file. To apply this keymap, use:
//   xkbcomp -w9 glostis-colemak.xkb_keymap $DISPLAY
//
// DO NOT COPY THIS INTO xkb/symbols: THIS WOULD MESS UP YOUR XKB CONFIG.
//
// File          : glostis-colemak.xkb_keymap
// Project page  : https://OneDeadKey.github.com/kalamine
// Author        : glostis
// Version       : 0.0.1
// License       : WTFPL - Do What The Fuck You Want Public License
//
// Custom Colemak layout adapted for coding and writing in French
//

xkb_keymap {
  xkb_keycodes      { include "evdev"    };
  xkb_types         { include "complete" };
  xkb_compatibility { include "complete" };

  // Base layer + dead key
  // ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
  // ┆     ┃     │     │     │     │     ┃     │     │     │     │     ┃ _   ┆ +   ┆
  // ┆     ┃     │     │     │     │     ┃     │     │     │     │   ° ┃ -   ┆ =   ┆
  // ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃ Q   │ W   │ F   │ J   │ B   ┃ Y   │ U   │ I   │ O   │ P   ┃ {   ┆ }   ┆
  //       ┃   œ │     │   à │   ù │     ┃     │   û │   î │   ô │     ┃ [   ┆ ]   ┆
  //       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃ A   │ R   │ S   │ T   │ G   ┃ H   │ N   │ E   │ L   │ !   ┃ "   ┆ |   ┆
  //       ┃   â │   é │   è │     │     ┃   ( │   ) │   ê │     │**   ┃ '   ┆ \   ┆
  // ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
  // ┆ >   ┃ Z   │ X   │ C   │ D   │ V   ┃ K ← │ M → │ ;   │ :   │ ?   ┃
  // ┆ <   ┃     │     │   ç │   _ │     ┃   « │   » │ ,   │ . … │ - — ┃
  // ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

  // AltGr layer
  // ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
  // ┆     ┃     │     │     │     │     ┃     │     │     │     │     ┃     ┆     ┆
  // ┆     ┃     │     │     │     │     ┃     │     │     │     │     ┃     ┆     ┆
  // ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃     │     │     │     │     ┃     │     │   × │     │     ┃     ┆     ┆
  //       ┃   ^ │   < │   > │   $ │   % ┃   @ │   & │   * │     │     ┃     ┆     ┆
  //       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃     │     │     │     │     ┃     │     │     │     │     ┃     ┆     ┆
  //       ┃   { │   ( │   ) │   } │   = ┃   \ │   + │   - │   / │     ┃     ┆     ┆
  // ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
  // ┆     ┃     │     │     │     │     ┃     │     │     │     │     ┃
  // ┆     ┃   ~ │   [ │   ] │   _ │   # ┃   | │     │     │   . │     ┃
  // ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

  partial alphanumeric_keys modifier_keys
  xkb_symbols "hack" {
    include "pc"
    include "inet(evdev)"

    // The “OneDeadKey” is an ISO_Level3_Latch, i.e. a “dead AltGr” key.
    // This is the only way to have a multi-purpose dead key with XKB.

    // The real AltGr key should be an ISO_Level5_Switch; however,
    // ISO_Level5_Switch does not work as expected when applying this layout
    // with xkbcomp, so let’s use two groups instead and make the AltGr key a
    // group selector.

    name[group1]= "Custom Colemak layout adapted for coding and writing in French";
    name[group2]= "AltGr";

    key.type[group1] = "FOUR_LEVEL";
    key.type[group2] = "TWO_LEVEL";

    // Digits
    key <AE01> {[ 1               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 1
    key <AE02> {[ 2               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 2
    key <AE03> {[ 3               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 3
    key <AE04> {[ 4               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 4
    key <AE05> {[ 5               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 5
    key <AE06> {[ 6               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 6
    key <AE07> {[ 7               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 7
    key <AE08> {[ 8               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 8
    key <AE09> {[ 9               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 9
    key <AE10> {[ 0               , VoidSymbol      , degree          , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 0   °

    // Letters, first row
    key <AD01> {[ q               , Q               , oe              , OE              ],[ asciicircum     , VoidSymbol      ]}; // q Q œ Œ ^
    key <AD02> {[ w               , W               , VoidSymbol      , VoidSymbol      ],[ less            , lessthanequal   ]}; // w W     < ≤
    key <AD03> {[ f               , F               , agrave          , Agrave          ],[ greater         , greaterthanequal]}; // f F à À > ≥
    key <AD04> {[ j               , J               , ugrave          , Ugrave          ],[ dollar          , VoidSymbol      ]}; // j J ù Ù $
    key <AD05> {[ b               , B               , VoidSymbol      , VoidSymbol      ],[ percent         , VoidSymbol      ]}; // b B     %
    key <AD06> {[ y               , Y               , VoidSymbol      , VoidSymbol      ],[ at              , VoidSymbol      ]}; // y Y     @
    key <AD07> {[ u               , U               , ucircumflex     , Ucircumflex     ],[ ampersand       , VoidSymbol      ]}; // u U û Û &
    key <AD08> {[ i               , I               , icircumflex     , Icircumflex     ],[ asterisk        , multiply        ]}; // i I î Î * ×
    key <AD09> {[ o               , O               , ocircumflex     , Ocircumflex     ],[ VoidSymbol      , VoidSymbol      ]}; // o O ô Ô
    key <AD10> {[ p               , P               , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // p P

    // Letters, second row
    key <AC01> {[ a               , A               , acircumflex     , Acircumflex     ],[ braceleft       , VoidSymbol      ]}; // a A â Â {
    key <AC02> {[ r               , R               , eacute          , Eacute          ],[ parenleft       , VoidSymbol      ]}; // r R é É (
    key <AC03> {[ s               , S               , egrave          , Egrave          ],[ parenright      , VoidSymbol      ]}; // s S è È )
    key <AC04> {[ t               , T               , VoidSymbol      , VoidSymbol      ],[ braceright      , VoidSymbol      ]}; // t T     }
    key <AC05> {[ g               , G               , VoidSymbol      , VoidSymbol      ],[ equal           , VoidSymbol      ]}; // g G     =
    key <AC06> {[ h               , H               , parenleft       , VoidSymbol      ],[ backslash       , VoidSymbol      ]}; // h H (   \ 
    key <AC07> {[ n               , N               , parenright      , VoidSymbol      ],[ plus            , VoidSymbol      ]}; // n N )   +
    key <AC08> {[ e               , E               , ecircumflex     , Ecircumflex     ],[ minus           , VoidSymbol      ]}; // e E ê Ê -
    key <AC09> {[ l               , L               , VoidSymbol      , VoidSymbol      ],[ slash           , VoidSymbol      ]}; // l L     /
    key <AC10> {[ ISO_Level3_Latch, exclam          , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ' !

    // Letters, third row
    key <AB01> {[ z               , Z               , VoidSymbol      , VoidSymbol      ],[ asciitilde      , VoidSymbol      ]}; // z Z     ~
    key <AB02> {[ x               , X               , VoidSymbol      , VoidSymbol      ],[ bracketleft     , VoidSymbol      ]}; // x X     [
    key <AB03> {[ c               , C               , ccedilla        , Ccedilla        ],[ bracketright    , VoidSymbol      ]}; // c C ç Ç ]
    key <AB04> {[ d               , D               , underscore      , VoidSymbol      ],[ underscore      , VoidSymbol      ]}; // d D _   _
    key <AB05> {[ v               , V               , VoidSymbol      , VoidSymbol      ],[ numbersign      , VoidSymbol      ]}; // v V     #
    key <AB06> {[ k               , K               , guillemotleft   , leftarrow       ],[ bar             , brokenbar       ]}; // k K « ← | ¦
    key <AB07> {[ m               , M               , guillemotright  , rightarrow      ],[ VoidSymbol      , VoidSymbol      ]}; // m M » →
    key <AB08> {[ comma           , semicolon       , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // , ;
    key <AB09> {[ period          , colon           , ellipsis        , VoidSymbol      ],[ period          , VoidSymbol      ]}; // . : …   .
    key <AB10> {[ minus           , question        , emdash          , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // - ? —

    // Pinky keys
    key <AE11> {[ minus           , underscore      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // - _
    key <AE12> {[ equal           , plus            , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // = +
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // [ {
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ apostrophe      , quotedbl        , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ' "
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // `
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // \ |
    key <LSGT> {[ less            , greater         , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // < >

    // Space bar
    key <SPCE> {[ space           , space           , apostrophe      , apostrophe      ],[ space           , space           ]}; //     ' '

    // AltGr
    // Note: the `ISO_Level5_Latch` here is meaningless but helps with Chromium.
    key <RALT> {
      type = "TWO_LEVEL",
      symbols = [ ISO_Level5_Latch, ISO_Level5_Latch ],
      actions = [ SetGroup(group=2), SetGroup(group=2) ]
    };
  };
};
// vim: ft=xkb:fdm=indent:ts=2:nowrap
