# vim: filetype=zsh


eval "$(pyenv init --path)"

[ -f $ZDOTDIR/secrets ] && source $ZDOTDIR/secrets

HISTFILE=~/.cache/zsh/history
mkdir -p $(dirname $HISTFILE)
HISTSIZE=100000
SAVEHIST=100000
# Use emacs-mode bindings
bindkey -e

setopt autocd       # Automatically cd into typed directory.
stty stop undef     # Disable ctrl-s to freeze terminal.

autoload -Uz compinit

# Highlight selected completion in the list
zstyle ':completion:*' menu select

# Source: https://superuser.com/a/815317
# 0 -- vanilla completion (abc => abc)
# 1 -- smart case completion (abc => Abc)
# 2 -- word flex completion (abc => A-big-Car)
# 3 -- full flex completion (abc => ABraCadabra)
zstyle ':completion:*' matcher-list '' \
  'm:{a-z\-}={A-Z\_}' \
  'r:[^[:alpha:]]||[[:alpha:]]=** r:|=* m:{a-z\-}={A-Z\_}' \
  'r:|?=** m:{a-z\-}={A-Z\_}'
zmodload zsh/complist

# Sometimes there's some completion functions in there
fpath+="$HOME/.zfunc"

compinit
_comp_options+=(globdots)  # Include hidden files.

if [ -f "$HOME/.zsh_plugins.sh" ]; then
    source $HOME/.zsh_plugins.sh
else
    echo "Bundling zsh plugins..."
    antibody bundle < $HOME/.config/zsh/plugins.txt > $HOME/.zsh_plugins.sh
fi

# Run compinit again since some plugins might define custom completions
compinit

# When set to 1, `z` will print the matched directory before navigating to it.
export _ZO_ECHO=1
eval "$(zoxide init zsh)"

# This shows a squiggly character in green if the previous return code
# was zero (success) or in red if the previous return code was non-zero (failure)
function return_code() {
    case "$HOST" in
        gaston*)
            prompt_char="ᰜ"
        ;;
        fr-glostis-xps*)
            prompt_char="ξ"
        ;;
        *)
            prompt_char="?"
        ;;
    esac
    echo "%(?:%F{green}${prompt_char}%f:%F{red}${prompt_char}%f)"
}

function pyenv_venv() {
    if [[ -n $PYENV_SHELL ]]; then
        local version
        version=$(pyenv version-name)
        if [[ $version != system ]]; then
            echo "($version) "
        fi
    fi
}
export PYENV_VIRTUALENV_DISABLE_PROMPT=1

function aws_profile() {
    if [[ -n $AWS_PROFILE ]]; then
        echo "(aws: $AWS_PROFILE) "
    fi
}

# There is no builtin way to determine if we are inside a `nix shell`
# (see https://github.com/NixOS/nix/issues/6677)
# so we rely on the fact that some `/nix/store/<hash>-program-<version/bin` paths are added to $PATH
function nix_shell() {
    nix_shell_binaries=$(echo "$PATH" | tr ':' '\n' | grep nix/store | sed -E 's/[^-]*-([^\/]*).*/\1/' | sort -u | tr '\n' ' ')
    if [[ -z $nix_shell_binaries ]]; then
        exit 0
    else
        printf '\033[2;3mNix shell (lvl %s): %s\033[0m' "$((SHLVL-2))" "$nix_shell_binaries"
    fi
}

PROMPT=""
# Inelegant way to introduce a newline in the prompt
[ -n "$(nix_shell)" ] && PROMPT="
$(nix_shell)
↪️ $PROMPT"

export ZSH_THEME_GIT_PROMPT_PREFIX="("
export ZSH_THEME_GIT_PROMPT_SUFFIX=") "
PROMPT=$(echo "$PROMPT"'$(pyenv_venv)$(aws_profile)$(return_code) %B%F{blue}%c%f%b $(git_super_status)')

[ -n "$RANGER_LEVEL" ] && PROMPT="(ranger) $PROMPT"

[ -f "/usr/share/fzf/key-bindings.zsh" ] && source "/usr/share/fzf/key-bindings.zsh"
[ -f "/usr/share/fzf/completion.zsh" ] && source "/usr/share/fzf/completion.zsh"
export FZF_DEFAULT_COMMAND="rg --files --hidden -g '!.git'"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

export RIPGREP_CONFIG_PATH="${HOME}/.config/ripgreprc"

# `less` with colors
# Taken from https://wiki.archlinux.org/title/Color_output_in_console#Environment_variables
export LESS='-R --use-color -Dd+r$Du+b$'

# `man` with colors
# Taken from https://github.com/sharkdp/bat#man
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export MANROFFOPT="-c"

source ${ZDOTDIR}/zbindings
source ${ZDOTDIR}/zalias
source ${ZDOTDIR}/zfunctions

eval "$(pyenv init -)"

# Auto-activates a virtualenv when in a directory
# which contains a .python-version file with the
# name of a pyenv virtualenv
#
# Warning: this only sets the PYENV_VIRTUAL_ENV env var,
# not the PYENV_VERSION one
eval "$(pyenv virtualenv-init -)"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
